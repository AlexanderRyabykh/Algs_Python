
# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
# программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Для анализа возьмите любые 1-3 ваших программы. Результаты анализа вставьте в виде комментариев к коду.
# P.S. Напишите в комментариях версию Python и разрядность ОС.

# Задача 2, урок 3. Во втором массиве сохранить индексы четных элементов первого массива.
# Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив
# надо заполнить значениями 0, 3, 4, 5 (индексация начинается с нуля),
# т.к. именно в этих позициях первого массива стоят четные числа.

# Задача запущена под win10 64x, python 3.6.4.

import sys
import random


def newer_show_size(x):
    """
    Составляем массив из байтов, занимаемых созданными объектами,
    включая байты вложенных объектов.
    На вход функции подаётся кортеж из исследуемых переменных,
    память под данный кортеж в результате не учитывается.
    """
    _result = []

    for i in x:
        _result.append(sys.getsizeof(i))

        if hasattr(i, '__iter__'):
            if hasattr(i, 'items'):
                for y in i.items():
                    _result.append(sys.getsizeof(y))

            elif not isinstance(i, str):
                for y in i:
                    _result.append(sys.getsizeof(y))

    return _result


SIZE = 10

array = [random.randint(0, 100) for i in range(SIZE)]
indices = []

for i, item in enumerate(array):
    if item % 2 == 0:
        indices.append(i)


print(array)
print(indices)
print(f'Переменные SIZE, array и indices занимают {sum(newer_show_size((SIZE, array, indices)))} байт')

"""
Результат: Переменные SIZE, array и indices занимают 406 байт
Результат 2: Переменные SIZE, array и indices занимают 334 байт
Результат варьирует в зависимости от количества чётных чисел в исходном массиве array.
"""
